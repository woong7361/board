<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.notice.repository.InquireBoardRepository">

    <resultMap id="boardWithAnswer" type="com.example.notice.dto.response.InquireBoardResponseDTO">
        <result property="title" column="title"/>
        <association property="inquireBoard" resultMap="boardMap">
        </association>
        <collection property="inquireAnswers" javaType="java.util.List" ofType="com.example.notice.entity.InquireAnswer">
            <id property="inquireAnswerId" column="inquire_answer_id"/>
            <result property="answer" column="answer"/>
            <result property="member.memberId" column="answer_member_id"/>
            <result property="member.name" column="answer_member_name"/>
            <result property="createdAt" column="answer_created_at"/>
            <result property="modifiedAt" column="answer_modified_at"/>
        </collection>
    </resultMap>

    <resultMap id="boardMap" type="com.example.notice.entity.InquireBoard">
        <id property="inquireBoardId" column="inquire_board_id" />
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="isSecret" column="is_secret"/>
        <result property="views" column="views"/>
        <result property="createdAt" column="created_at"/>
        <result property="modifiedAt" column="modified_at"/>
        <result property="member.memberId" column="board_member_id"/>
        <result property="member.name" column="board_member_name"/>
    </resultMap>

    <resultMap id="answerMap" type="com.example.notice.entity.InquireAnswer">
        <id property="inquireAnswerId" column="inquire_answer_id"/>
        <result property="answer" column="answer"/>
        <result property="member.memberId" column="answer_member_id"/>
        <result property="member.name" column="answer_member_name"/>
    </resultMap>

    <sql id="searchCondition">
        <where>
            <choose>
                <when test="search.startDate != null and search.endDate != null ">
                    AND
                    ((ib.created_at BETWEEN #{search.startDate} AND #{search.endDate})
                    OR
                    (ib.modified_at BETWEEN #{search.startDate} AND #{search.endDate}))
                </when>
                <otherwise>
                    AND
                    ((ib.created_at BETWEEN SUBDATE(NOW(), INTERVAL 1 YEAR) AND NOW())
                    OR
                    (ib.modified_at BETWEEN SUBDATE(NOW(), INTERVAL 1 YEAR) AND NOW()))
                </otherwise>
            </choose>

            <if test="search.keyWord != null and search.keyWord != ''">
                AND (
                ib.title LIKE CONCAT('%', #{search.keyWord}, '%')
                OR ib.content LIKE CONCAT('%', #{search.keyWord}, '%')
                OR m.`name` LIKE CONCAT('%', #{search.keyWord}, '%'))
            </if>

            <if test="search.searchMemberId != null">
                AND
                ib.member_id = #{search.searchMemberId}
            </if>
        </where>
    </sql>

    <insert id="save" useGeneratedKeys="true" keyProperty="inquireBoard.inquireBoardId">
        INSERT INTO inquire_board
            (member_id, title, content,
             views, is_secret,
             created_at, modified_at)
        VALUES
            (#{memberId}, #{inquireBoard.title}, #{inquireBoard.content},
             0, #{inquireBoard.isSecret},
             NOW(), NOW())

    </insert>

    <select id="getSearchTotalCount" resultType="int">
        SELECT
            count(*)
        FROM
            inquire_board AS ib
            LEFT JOIN member m on m.member_id = ib.member_id
        <include refid="searchCondition"/>
    </select>

    <select id="search" resultType="com.example.notice.dto.response.InquireBoardSearchResponseDTO">
        SELECT
            ib.*,
            m.name AS 'memberName', m.member_id AS 'memberId',
            (SELECT count(*)
             FROM inquire_answer AS ia
             WHERE ia.inquire_board_id = ib.inquire_board_id) AS isAnswered
        FROM
            inquire_board AS ib
            LEFT JOIN member m on m.member_id = ib.member_id
        <include refid="searchCondition"/>
        <choose>
            <when test="page.orderColumn != null and page.orderType != null">
                ORDER BY ${page.orderColumn} ${page.orderType}
            </when>
            <otherwise>
                ORDER BY ib.modified_at DESC
            </otherwise>
        </choose>
        LIMIT #{page.offset}, #{page.size}
    </select>

    <select id="findById" resultMap="boardWithAnswer">
        SELECT
            ib.*,
            ia.*,
            ia.created_at AS 'answer_created_at', ia.modified_at AS 'answer_modified_at',
            bm.member_id AS 'board_member_id', bm.name AS 'board_member_name',
            am.member_id AS 'answer_member_id', am.name AS 'answer_member_name'
        FROM inquire_board ib
                 LEFT JOIN member bm on bm.member_id = ib.member_id
                 LEFT JOIN inquire_answer ia on ib.inquire_board_id = ia.inquire_board_id
                 LEFT JOIN member am on ia.member_id = am.member_id
        WHERE ib.inquire_board_id = #{inquireBoardId}
    </select>

    <select id="findByInquireBoardIdAndMemberId" resultType="com.example.notice.entity.InquireBoard">
        SELECT *
        FROM inquire_board ib
        WHERE ib.inquire_board_id = #{inquireBoardId}
          AND ib.member_id = #{memberId};
    </select>

    <update id="updateById">
        UPDATE inquire_board
        SET
            title = #{inquireBoard.title},
            content = #{inquireBoard.content},
            is_secret = #{inquireBoard.isSecret},
            modified_at = NOW()
        WHERE inquire_board_id = #{inquireBoardId}
    </update>

    <delete id="deleteById">
        DELETE FROM inquire_board
        WHERE inquire_board_id = #{inquireBoardId};

    </delete>

    <update id="increaseViewsById">
        UPDATE inquire_board
        SET views = (views + 1)
        WHERE inquire_board_id = #{inquireBoardId}
    </update>
</mapper>